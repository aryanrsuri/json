From 8315463b19a8218fb0782a8c00378943d4ebe97f Mon Sep 17 00:00:00 2001
From: aryanrsuri <13823329+aryanrsuri@users.noreply.github.com>
Date: Sat, 6 Jul 2024 00:19:18 -0700
Subject: [PATCH] Added debug function for rapid testing of json

Signed-off-by: aryanrsuri <13823329+aryanrsuri@users.noreply.github.com>
---
 src/json.zig | 52 ++++++++++++++++++++--------------------------------
 src/main.zig | 14 +++-----------
 2 files changed, 23 insertions(+), 43 deletions(-)

diff --git a/src/json.zig b/src/json.zig
index f7c9f83..fc88cce 100644
--- a/src/json.zig
+++ b/src/json.zig
@@ -49,7 +49,7 @@ pub const Scanner = struct {
         self.* = undefined;
     }
 
-    pub fn read_scalar(self: *@This()) !Token {
+    fn read_scalar(self: *@This()) !Token {
         const value_start = self.cursor;
         while (std.ascii.isAlphabetic(self.buffer[self.cursor])) {
             self.read();
@@ -69,7 +69,7 @@ pub const Scanner = struct {
         }
     }
 
-    pub fn read_number(self: *@This()) []const u8 {
+    fn read_number(self: *@This()) []const u8 {
         const value_start = self.cursor;
         while (std.ascii.isDigit(self.buffer[self.cursor])) {
             self.read();
@@ -77,7 +77,7 @@ pub const Scanner = struct {
         return self.buffer[value_start..self.cursor];
     }
 
-    pub fn read_value(self: *@This()) []const u8 {
+    fn read_value(self: *@This()) []const u8 {
         const value_start = self.cursor;
         while (true) {
             switch (self.buffer[self.cursor]) {
@@ -88,7 +88,7 @@ pub const Scanner = struct {
         return self.buffer[value_start..self.cursor];
     }
 
-    pub fn read(self: *@This()) void {
+    fn read(self: *@This()) void {
         if (self.cursor + 1 >= self.buffer.len) {
             self.state = .end_of_document;
         } else {
@@ -206,15 +206,25 @@ pub const Scanner = struct {
         return token;
     }
 
-    pub fn peek(self: *@This()) u8 {
-        return self.buffer[self.cursor + 1];
-    }
-
     fn next_non_whitespace(self: *@This()) void {
         while (std.ascii.isWhitespace(self.buffer[self.cursor])) {
             self.read();
         }
     }
+
+    pub fn debug(self: *@This()) !void {
+        while (self.state != .end_of_document) {
+            const ntoken = try self.next();
+            if (ntoken) |token| {
+                var i: usize = 0;
+                while (i < self.stack.items.len) : (i += 1) {
+                    std.debug.print("->", .{});
+                }
+                std.debug.print("\t{any}\n", .{token});
+            }
+        }
+        std.debug.print("map: {s}\n", .{self.map.keys()});
+    }
 };
 
 test "JSON Simple" {
@@ -260,18 +270,7 @@ test "JSON Full" {
     const d = std.testing.allocator;
     var s = Scanner.init(d, scanner_test);
     defer s.deinit();
-
-    while (s.state != .end_of_document) {
-        const next = try s.next();
-        if (next) |token| {
-            var i: usize = 0;
-            while (i < s.stack.items.len) : (i += 1) {
-                std.debug.print("-", .{});
-            }
-            std.debug.print("|\t{any}\n", .{token});
-        }
-    }
-    std.debug.print("map: {s}\n", .{s.map.keys()});
+    _ = try s.debug();
 }
 
 test "JSON HTTP" {
@@ -309,16 +308,5 @@ test "JSON HTTP" {
     const d = std.testing.allocator;
     var s = Scanner.init(d, scanner_test);
     defer s.deinit();
-
-    while (s.state != .end_of_document) {
-        const next = try s.next();
-        if (next) |token| {
-            var i: usize = 0;
-            while (i < s.stack.items.len) : (i += 1) {
-                std.debug.print("-", .{});
-            }
-            std.debug.print("|\t{any}\n", .{token});
-        }
-    }
-    std.debug.print("map: {s}\n", .{s.map.keys()});
+    _ = try s.debug();
 }
diff --git a/src/main.zig b/src/main.zig
index afa7df3..077cac7 100644
--- a/src/main.zig
+++ b/src/main.zig
@@ -1,6 +1,3 @@
-const std = @import("std");
-const Scanner = @import("json.zig").Scanner;
-
 pub fn main() !void {
     const file =
         \\{
@@ -18,14 +15,9 @@ pub fn main() !void {
         \\    }
         \\}
     ;
-    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
+    var gpa = @import("std").heap.GeneralPurposeAllocator(.{}){};
     const allocator = gpa.allocator();
-    var scanner = Scanner.init(allocator, file);
+    var scanner = @import("json.zig").Scanner.init(allocator, file);
     defer scanner.deinit();
-    while (scanner.state != .end_of_document) {
-        const next = try scanner.next();
-        if (next) |token| {
-            std.debug.print("nesting: {d}\ttoken: {any}\n", .{ scanner.stack.items.len, token });
-        }
-    }
+    _ = try scanner.debug();
 }
-- 
2.42.0

